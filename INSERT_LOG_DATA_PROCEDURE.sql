create or replace
PROCEDURE HPDM_INSERT_LOG_DATA_PROCEDURE
(  WELL_LOG_PARAM IN HPDM_WELL_LOG_TAB_TYPE,
  WELL_LOG_CURVE_PARAM IN HPDM_WELL_LOG_CURVE_TAB_TYPE,
  WELL_LOG_DATA_PARAM IN HPDM_WELL_LOG_DATA_TAB_TYPE, 
  WELL_LOG_PARAMS IN HPDM_WELL_LOG_PARAMS_TAB_TYPE,
  DOC_INFO_PARAM IN HPDM_DOC_INFO_TAB_TYPE,
  DOC_ADDL_INFO_PARAM IN HPDM_DOC_ADDL_INFO_TAB_TYPE
) As
count_doc INTEGER;
BEGIN
if WELL_LOG_PARAM is not NULL then
FOR i in 1..WELL_LOG_PARAM.COUNT
Loop
 INSERT INTO HPDM_WELL_LOG VALUES (
   WELL_LOG_PARAM(i).LOG_ID, 
	 WELL_LOG_PARAM(i).WELL_ID  , 
	 WELL_LOG_PARAM(i).WELLBORE_ID, 
	 WELL_LOG_PARAM(i).LOG_NAME, 
	 WELL_LOG_PARAM(i).LOG_DESCRIPTION, 
	 WELL_LOG_PARAM(i).CREATED_BY, 
	 WELL_LOG_PARAM(i).CREATION_DATE, 
	 WELL_LOG_PARAM(i).OBJECT_GROWING_Y_N, 
	 WELL_LOG_PARAM(i).DATA_UPDATE_RATE, 
	 WELL_LOG_PARAM(i).REQUEST_LATEST_VALUE, 
	 WELL_LOG_PARAM(i).CURVE_SENSORS_ALIGNED, 
	 WELL_LOG_PARAM(i).DATAGROUP, 
	 WELL_LOG_PARAM(i).SERVICE_COMPANY, 
	 WELL_LOG_PARAM(i).RUN_NUMBER, 
	 WELL_LOG_PARAM(i).BHA_RUN_NUMBER, 
	 WELL_LOG_PARAM(i).INDEX_TYPE, 
	 WELL_LOG_PARAM(i).INDEX_CURVE, 
	 WELL_LOG_PARAM(i).INDEX_NULL_VALUE, 
	 WELL_LOG_PARAM(i).START_INDEX, 
	 WELL_LOG_PARAM(i).START_INDEX_UOM, 
	 WELL_LOG_PARAM(i).END_INDEX, 
	 WELL_LOG_PARAM(i).END_INDEX_UOM, 
	 WELL_LOG_PARAM(i).START_DATETIME_INDEX, 
	 WELL_LOG_PARAM(i).END_DATETIME_INDEX, 
	 WELL_LOG_PARAM(i).STEP_INCREMENT, 
	 WELL_LOG_PARAM(i).STEP_INCREMENT_UOM, 
	 WELL_LOG_PARAM(i).DIRECTION, 
	 WELL_LOG_PARAM(i).CD_SOURCE_NAME, 
	 WELL_LOG_PARAM(i).CD_CREATION_TIME, 
	 WELL_LOG_PARAM(i).CD_LAST_CHANGED, 
	 WELL_LOG_PARAM(i).CD_ITEM_STATE, 
	 WELL_LOG_PARAM(i).CD_SERVICE_CATEGORY, 
	 WELL_LOG_PARAM(i).CD_COMMENTS, 
 WELL_LOG_PARAM(i).CD_AQUISITION_TIME_ZONE, 
	 WELL_LOG_PARAM(i).CD_DEFAULT_DATUM, 
   WELL_LOG_PARAM(i).CD_PRIVATE_GROUP_ONLY );
 End Loop;
  end if;
 if WELL_LOG_CURVE_PARAM is not NULL then
 FOR i in 1..WELL_LOG_CURVE_PARAM.COUNT
Loop
 INSERT INTO HPDM_WELL_LOG_CURVE VALUES (
   WELL_LOG_CURVE_PARAM(i).LOG_CURVE_ID, 
	 WELL_LOG_CURVE_PARAM(i).WELL_ID, 
	 WELL_LOG_CURVE_PARAM(i).WELLBORE_ID, 
	 WELL_LOG_CURVE_PARAM(i).LOG_ID, 
	 WELL_LOG_CURVE_PARAM(i).MNEMONIC, 
	 WELL_LOG_CURVE_PARAM(i).CLASS_WITSML, 
	 WELL_LOG_CURVE_PARAM(i).UOM, 
	 WELL_LOG_CURVE_PARAM(i).MNEMONIC_ALIAS, 
	 WELL_LOG_CURVE_PARAM(i).NULL_VALUE, 
	 WELL_LOG_CURVE_PARAM(i).MIN_INDEX, 
	 WELL_LOG_CURVE_PARAM(i).MAX_INDEX, 
	 WELL_LOG_CURVE_PARAM(i).MIN_INDEX_UOM, 
	 WELL_LOG_CURVE_PARAM(i).MAX_INDEX_UOM   , 
	 WELL_LOG_CURVE_PARAM(i).MIN_INDEX_DATE_TIME, 
	 WELL_LOG_CURVE_PARAM(i).MAX_INDEX_DATE_TIME, 
	 WELL_LOG_CURVE_PARAM(i).CURVE_DESCRIPTION, 
	 WELL_LOG_CURVE_PARAM(i).SENSOR_OFFSET, 
	 WELL_LOG_CURVE_PARAM(i).SENSOR_OFFSET_UOM, 
	 WELL_LOG_CURVE_PARAM(i).DATA_SOURCE, 
	 WELL_LOG_CURVE_PARAM(i).DENSDATA, 
	 WELL_LOG_CURVE_PARAM(i).DENS_DATA_UOM, 
	 WELL_LOG_CURVE_PARAM(i).TRACE_STATE, 
	 WELL_LOG_CURVE_PARAM(i).TRACE_ORIGIN, 
	 WELL_LOG_CURVE_PARAM(i).TYPE_LOG_DATA 
 );
End Loop;
 end if;
  if WELL_LOG_DATA_PARAM is not NULL then
FOR i in 1..WELL_LOG_DATA_PARAM.COUNT
 Loop
 INSERT INTO HPDM_WELL_LOG_DATA VALUES (
   WELL_LOG_DATA_PARAM(i).LOG_DATA_UID, 
	 WELL_LOG_DATA_PARAM(i).WELL_ID, 
	 WELL_LOG_DATA_PARAM(i).WELLBORE_ID, 
	 WELL_LOG_DATA_PARAM(i).LOG_ID, 
	 WELL_LOG_DATA_PARAM(i).CURVE_ID, 
	 WELL_LOG_DATA_PARAM(i).UOM, 
	 WELL_LOG_DATA_PARAM(i).MNEMONIC_VALUE
 );
End Loop;
end if;
if WELL_LOG_PARAMS is not NULL then
FOR i in 1..WELL_LOG_PARAMS.COUNT
 Loop
 INSERT INTO HPDM_WELL_LOG_PARAMS VALUES (
	 WELL_LOG_PARAMS(i).LOG_PARAM_ID, 
	 WELL_LOG_PARAMS(i).LOG_ID, 
	 WELL_LOG_PARAMS(i).LOG_PARAM, 
	 WELL_LOG_PARAMS(i).LOG_PARAM_NAME, 
	 WELL_LOG_PARAMS(i).LOG_PARAM_INDEX, 
	 WELL_LOG_PARAMS(i).LOG_PARAM_UOM, 
	 WELL_LOG_PARAMS(i).LOG_PARAM_DESCRIPTION
 );
End Loop;
end if;
count_doc:=0;
if DOC_INFO_PARAM is not NULL then
FOR i in 1..DOC_INFO_PARAM.COUNT
Loop
count_doc:=seq_doc.nexTval;
 INSERT INTO HPDM_DOCUMENTATION_INFO VALUES (
    count_doc,
	 DOC_INFO_PARAM(i).OBJECT_TYPE,
	 DOC_INFO_PARAM(i).OBJECT_UID,
	 DOC_INFO_PARAM(i).DOCUMENT_NAME,
	 DOC_INFO_PARAM(i).DOCUMENT_DATE,
	 DOC_INFO_PARAM(i).DOCUMENT_CLASS,
	 DOC_INFO_PARAM(i).CREATION_DATE,
	 DOC_INFO_PARAM(i).CREATOR,
	 DOC_INFO_PARAM(i).SOFTWARE,
	 DOC_INFO_PARAM(i).FILE_COMMENTS,
	 DOC_INFO_PARAM(i).SECURITY_CLASS, 
	 DOC_INFO_PARAM(i).SECURITY_SYSTEM,
	 DOC_INFO_PARAM(i).SECURITY_END_DATE,
	 DOC_INFO_PARAM(i).SECURITY_COMMENTS,
	 DOC_INFO_PARAM(i).DISCLAIMER,
	 DOC_INFO_PARAM(i).DOCUMENT_OWNER,
	 DOC_INFO_PARAM(i).COMMENTS,
   DOC_INFO_PARAM(i).DOCUMENT_ALIAS
   
 );
if DOC_ADDL_INFO_PARAM is not NULL then
 INSERT INTO HPDM_DOCUMENTATION_ADDL_INFO  VALUES (  DOC_ADDL_INFO_PARAM(i).DOC_INFO_ID, 
   count_doc, 
   DOC_ADDL_INFO_PARAM(i).DOCUMENT_EVENT_TYPE, 
   DOC_ADDL_INFO_PARAM(i).DOCUMENT_EVENT_DATE,
   DOC_ADDL_INFO_PARAM(i).DOCUMENT_RES_PARTY,
   DOC_ADDL_INFO_PARAM(i).DOC_COMMENT
	 );
end if;
End Loop;
end if;
commit;
END HPDM_INSERT_LOG_DATA_PROCEDURE;
