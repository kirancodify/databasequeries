-- Declare the SQL type for the PL/SQL type ROWTYPE_PL2
CREATE OR REPLACE TYPE CTB_GETPLANOFCARE_X91857X1X3 AS OBJECT (
      PLANPROC VARCHAR2(250),
      PLANDATE VARCHAR2(20),
      DOCID VARCHAR2(250),
      DOCTITLE VARCHAR2(500)
);
/
show errors
CREATE OR REPLACE TYPE CTB_GETPLANOFCARE_PLANPROC AS TABLE OF CTB_GETPLANOFCARE_X91857X1X3; 
/
show errors
-- Declare package containing conversion functions between SQL and PL/SQL types
CREATE OR REPLACE PACKAGE BPEL_GETPLANOFCARE AS
	-- Redefine a PL/SQL RECORD type originally defined via CURSOR%ROWTYPE
	TYPE ROWTYPE_PL2 IS RECORD (
		PLANPROC VARCHAR2(250),
		PLANDATE VARCHAR2(20),
		DOCID VARCHAR2(250),
		DOCTITLE VARCHAR2(500));
	-- Declare the conversion functions the PL/SQL type ROWTYPE_PL2
	FUNCTION PL_TO_SQL1(aPlsqlItem ROWTYPE_PL2)
 	RETURN CTB_GETPLANOFCARE_X91857X1X3;
	FUNCTION SQL_TO_PL1(aSqlItem CTB_GETPLANOFCARE_X91857X1X3)
	RETURN ROWTYPE_PL2;
	-- Declare the conversion functions the PL/SQL type CTB_GETPLANOFCARE.PLANPROC
	FUNCTION PL_TO_SQL0(aPlsqlItem CTB_GETPLANOFCARE.PLANPROC)
 	RETURN CTB_GETPLANOFCARE_PLANPROC;
	FUNCTION SQL_TO_PL0(aSqlItem CTB_GETPLANOFCARE_PLANPROC)
	RETURN CTB_GETPLANOFCARE.PLANPROC;
   PROCEDURE ctb_getplanofcare$getplanofca (PATID VARCHAR2,
	POC OUT CTB.CTB_GETPLANOFCARE_PLANPROC
	);
END BPEL_GETPLANOFCARE;
/
show errors
CREATE OR REPLACE PACKAGE BODY BPEL_GETPLANOFCARE IS
	FUNCTION PL_TO_SQL1(aPlsqlItem ROWTYPE_PL2)
 	RETURN CTB_GETPLANOFCARE_X91857X1X3 IS 
	aSqlItem CTB_GETPLANOFCARE_X91857X1X3; 
	BEGIN 
		-- initialize the object
		aSqlItem := CTB_GETPLANOFCARE_X91857X1X3(NULL, NULL, NULL, NULL);
		aSqlItem.PLANPROC := aPlsqlItem.PLANPROC;
		aSqlItem.PLANDATE := aPlsqlItem.PLANDATE;
		aSqlItem.DOCID := aPlsqlItem.DOCID;
		aSqlItem.DOCTITLE := aPlsqlItem.DOCTITLE;
		RETURN aSqlItem;
	END PL_TO_SQL1;
	FUNCTION SQL_TO_PL1(aSqlItem CTB_GETPLANOFCARE_X91857X1X3) 
	RETURN ROWTYPE_PL2 IS 
	aPlsqlItem ROWTYPE_PL2; 
	BEGIN 
		aPlsqlItem.PLANPROC := aSqlItem.PLANPROC;
		aPlsqlItem.PLANDATE := aSqlItem.PLANDATE;
		aPlsqlItem.DOCID := aSqlItem.DOCID;
		aPlsqlItem.DOCTITLE := aSqlItem.DOCTITLE;
		RETURN aPlsqlItem;
	END SQL_TO_PL1;
	FUNCTION PL_TO_SQL0(aPlsqlItem CTB_GETPLANOFCARE.PLANPROC)
 	RETURN CTB_GETPLANOFCARE_PLANPROC IS 
	aSqlItem CTB_GETPLANOFCARE_PLANPROC; 
	BEGIN 
		-- initialize the table 
		aSqlItem := CTB_GETPLANOFCARE_PLANPROC();
		IF aPlsqlItem IS NOT NULL THEN
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		IF aPlsqlItem.COUNT>0 THEN
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL1(aPlsqlItem(I));
		END LOOP; 
		END IF; 
		END IF; 
		RETURN aSqlItem;
	END PL_TO_SQL0;
	FUNCTION SQL_TO_PL0(aSqlItem CTB_GETPLANOFCARE_PLANPROC) 
	RETURN CTB_GETPLANOFCARE.PLANPROC IS 
	aPlsqlItem CTB_GETPLANOFCARE.PLANPROC; 
	BEGIN 
		IF aSqlItem.COUNT>0 THEN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL1(aSqlItem(I));
		END LOOP; 
		END IF;
		RETURN aPlsqlItem;
	END SQL_TO_PL0;

   PROCEDURE ctb_getplanofcare$getplanofca (PATID VARCHAR2,
	POC OUT CTB.CTB_GETPLANOFCARE_PLANPROC
	) IS
 POC_ CTB.CTB_GETPLANOFCARE.PLANPROC;
   BEGIN
      CTB.CTB_GETPLANOFCARE.GETPLANOFCARE(PATID,
	POC_
	);
 POC := BPEL_GETPLANOFCARE.PL_TO_SQL0(POC_);
   END ctb_getplanofcare$getplanofca;

END BPEL_GETPLANOFCARE;
/
show errors
exit
